"""
_single_leading_underscore
Таким способом задаются частные переменные, функции, методы и классы в модуле. Все, что использует такой способ задания
имени, будет проигнорировано в from module import *.

single_trailing_underscore_
Такой метод задания имен используется для избежания конфликтов со встроенными именами или классами.

__double_leading_underscore
Двойное подчеркивание (__) используется для искажения имен атрибутов в классе. Если мы создадим метод с именем
«__method» в классе с именем «ClassName», то вызвать этот метод так: «ClassName.__method» — у нас уже не получится.
Любой идентификатор формы __spam(не менее двух ведущих подчеркиваний, не более одного подчеркивания в конце) текстуально
 заменяется на _classname__spam, где classname- текущее имя класса с удаленными ведущими подчеркиваниями. Это изменение
 выполняется без учета синтаксической позиции идентификатора, поэтому его можно использовать для определения частных
 экземпляров и переменных класса, методов, переменных, хранящихся в глобальных объектах, и даже переменных, хранящихся в
  экземплярах. закрытый для этого класса в экземплярах других классов.

__double_leading_and_trailing_underscore__
Такой способ именования используется для специальных переменных или функций, таких как __init__ или __len__.
 Магические методы представляют простой способ заставить объекты вести себя аналогично встроенным типам.
 Это, в частности, позволяет стандартизировать поведение базовых операторов с экземплярами класса.
 '__class__', '__delattr__', '__dict__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__',
 '__getattribute__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__le__', '__len__', '__lt__',
 '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__',
 '__str__', '__subclasshook__', '__weakref__'
"""

print(__doc__)


class A:
    def __init__(self, name, *args):
        self.name = name
        self.__coords = args

    def __repr__(self):  # для разработчика
        return f"{self.__class__}: {self.name}"

    def __str__(self):  # для пользователя
        return f"{self.name}"

    def __len__(self):
        return len(self.__coords)


a = A('myname', 1, 2, 3, 40)

print(a, len(a))
print(dir(a))
print(dir(A))
